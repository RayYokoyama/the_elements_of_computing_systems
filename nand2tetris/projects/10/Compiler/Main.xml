<class>
  <keyword> class </keyword>
  <identifier> Main </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> boolean </keyword>
    <identifier> test </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> main </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier> SquareGame </identifier>
        <identifier> game </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> game </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> SquareGame </identifier>
            </term>
            <term>
              <symbol> . </symbol>
            </term>
            <term>
              <identifier> new </identifier>
            </term>
            <term>
              <symbol> ( </symbol>
            </term>
            <term>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> game </identifier>
          <symbol> . </symbol>
          <identifier> run </identifier>
          <expressionList>
            <symbol> ( </symbol>
            <symbol> ) </symbol>
            <symbol> ; </symbol>
          </expressionList>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> game </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <expressionList>
            <symbol> ( </symbol>
            <symbol> ) </symbol>
            <symbol> ; </symbol>
          </expressionList>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
        <symbol> } </symbol>
      </statements>
      <keyword> function </keyword>
      <keyword> void </keyword>
      <identifier> test </identifier>
      <symbol> ( </symbol>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> , </symbol>
        <identifier> j </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <identifier> String </identifier>
        <identifier> s </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <identifier> Array </identifier>
        <identifier> a </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <keyword> false </keyword>
            </term>
            <term>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> s </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> "stringconstant" </identifier>
                </term>
                <term>
                  <symbol> ; </symbol>
                </term>
                <statements>
                  <letStatement>
                    <keyword> let </keyword>
                    <identifier> s </identifier>
                    <symbol> = </symbol>
                    <expression>
                      <term>
                        <keyword> null </keyword>
                      </term>
                      <term>
                        <symbol> ; </symbol>
                      </term>
                      <statements>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> a </identifier>
                          <symbol> [ </symbol>
                          <expression>
                            <term>
                              <integerConstant> 1 </integerConstant>
                            </term>
                            <term>
                              <symbol> ] </symbol>
                            </term>
                          </expression>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <identifier> a </identifier>
                            </term>
                            <term>
                              <symbol> [ </symbol>
                            </term>
                            <term>
                              <integerConstant> 2 </integerConstant>
                            </term>
                            <term>
                              <symbol> ] </symbol>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                        <symbol> } </symbol>
                      </statements>
                      <statements>
                        <keyword> else </keyword>
                        <symbol> { </symbol>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> i </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <identifier> i </identifier>
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <symbol> ( </symbol>
                            </term>
                            <symbol> - </symbol>
                            <term>
                              <identifier> j </identifier>
                            </term>
                            <term>
                              <symbol> ) </symbol>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> j </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <identifier> j </identifier>
                            </term>
                            <symbol> / </symbol>
                            <term>
                              <symbol> ( </symbol>
                            </term>
                            <symbol> - </symbol>
                            <term>
                              <integerConstant> 2 </integerConstant>
                            </term>
                            <term>
                              <symbol> ) </symbol>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> i </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <identifier> i </identifier>
                            </term>
                            <symbol> | </symbol>
                            <term>
                              <identifier> j </identifier>
                            </term>
                            <term>
                              <symbol> ; </symbol>
                            </term>
                            <term>
                              <symbol> } </symbol>
                            </term>
                            <statements>
                              <returnStatement>
                                <keyword> return </keyword>
                                <symbol> ; </symbol>
                              </returnStatement>
                              <symbol> } </symbol>
                            </statements>
                            <term>
                              <symbol> } </symbol>
                            </term>